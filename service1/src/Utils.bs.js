// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function make(error_type, message) {
  return /* record */[
          /* error_type */error_type,
          /* message */message
        ];
}

function toJson(err) {
  return Json_encode.object_(/* :: */[
              /* tuple */[
                "error_type",
                err[/* error_type */0]
              ],
              /* :: */[
                /* tuple */[
                  "message",
                  err[/* message */1]
                ],
                /* [] */0
              ]
            ]);
}

var UserFacingError = /* module */[
  /* make */make,
  /* toJson */toJson
];

function id(x) {
  return x;
}

function $less$pipe(f, g, x) {
  return Curry._1(f, Curry._1(g, x));
}

function safe_int_of_string(str) {
  var exit = 0;
  var x;
  try {
    x = Caml_format.caml_int_of_string(str);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      return undefined;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return x;
  }
  
}

function map_option(f, opt) {
  if (opt !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(opt));
  }
  
}

function getDictString(key, dict) {
  return map_option(Js_json.decodeString, Js_primitive.undefined_to_opt(dict[key]));
}

exports.UserFacingError = UserFacingError;
exports.id = id;
exports.$less$pipe = $less$pipe;
exports.safe_int_of_string = safe_int_of_string;
exports.map_option = map_option;
exports.getDictString = getDictString;
/* Json_encode Not a pure module */
