// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Express = require("bs-express/src/Express.js");
var Process = require("process");
var Utils$WebServer = require("./Utils.bs.js");
var Either$WebServer = require("./Either.bs.js");
var HttpHelpers$WebServer = require("./HttpHelpers.bs.js");
var CustomMiddleware$WebServer = require("./CustomMiddleware.bs.js");

var app = Express.express(/* () */0);

function sendBadRequest(msg) {
  return Express.Middleware[/* from */5]((function (_, _$1, res) {
                return Express.Response[/* sendString */2](msg, HttpHelpers$WebServer.statusBadRequest(res));
              }));
}

function sendNotFound(msg) {
  return Express.Middleware[/* from */5]((function (_, _$1, res) {
                return Express.Response[/* sendString */2](msg, HttpHelpers$WebServer.statusNotFound(res));
              }));
}

function onGet(path, listMiddleware) {
  return Express.App[/* getWithMany */5](app, path, listMiddleware);
}

function onPost(path, listMiddleware) {
  return Express.App[/* postWithMany */8](app, path, listMiddleware);
}

onGet("/", /* array */[
      CustomMiddleware$WebServer.logging,
      CustomMiddleware$WebServer.sendHtml("Hello there!")
    ]);

var partial_arg = Express.Request[/* params */0];

var partial_arg$1 = /* tuple */[
  "MissingArguments",
  "Missing param: [:id]"
];

function partial_arg$2(param) {
  return Either$WebServer.from_option(partial_arg$1, param);
}

function partial_arg$3(param) {
  return Utils$WebServer.$less$pipe(partial_arg$2, (function (param) {
                return Utils$WebServer.getDictString("id", param);
              }), param);
}

function readIdParam(param) {
  return Utils$WebServer.$less$pipe(partial_arg$3, partial_arg, param);
}

var partial_arg$4 = /* tuple */[
  "BadArguments",
  "Wrong :id"
];

function partial_arg$5(param) {
  return Either$WebServer.from_option(partial_arg$4, param);
}

function parseId(param) {
  return Utils$WebServer.$less$pipe(partial_arg$5, Utils$WebServer.safe_int_of_string, param);
}

onPost("/user/:id", /* array */[
      CustomMiddleware$WebServer.logging,
      Express.Middleware[/* from */5]((function (_, req, res) {
              return Either$WebServer.fold((function (param) {
                            return HttpHelpers$WebServer.sendJson(HttpHelpers$WebServer.makeErrorJson(param[0], param[1]), HttpHelpers$WebServer.statusBadRequest(res));
                          }), (function (userId) {
                            return HttpHelpers$WebServer.sendJson(HttpHelpers$WebServer.makeSuccessJson(userId, "Bob"), res);
                          }), Either$WebServer.flatMap(parseId, readIdParam(req)));
            }))
    ]);

function onListen(e) {
  var exit = 0;
  var val;
  try {
    val = e;
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      console.log(exn[1]);
      Process.exit(1);
      return /* () */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    console.log("Listening at http://127.0.0.1:3000");
    return /* () */0;
  }
  
}

Express.App[/* listen */19](app, 3000, onListen, /* () */0);

exports.app = app;
exports.sendBadRequest = sendBadRequest;
exports.sendNotFound = sendNotFound;
exports.onGet = onGet;
exports.onPost = onPost;
exports.readIdParam = readIdParam;
exports.parseId = parseId;
exports.onListen = onListen;
/* app Not a pure module */
