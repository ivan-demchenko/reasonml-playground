// Generated by BUCKLESCRIPT VERSION 4.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Axios = require("axios");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var $$String = require("bs-platform/lib/js/string.js");
var Express = require("bs-express/src/Express.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Process = require("process");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var RemoteUser$WebServer = require("./RemoteUser.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var app = Express.express(/* () */0);

function flatMap_option(f, opt) {
  if (opt !== undefined) {
    return Curry._1(f, Js_primitive.valFromOption(opt));
  }
  
}

function map_option(f, opt) {
  if (opt !== undefined) {
    return Js_primitive.some(Curry._1(f, Js_primitive.valFromOption(opt)));
  }
  
}

function getDictString(dict, key) {
  return flatMap_option(Js_json.decodeString, Js_primitive.undefined_to_opt(dict[key]));
}

function getDictFloat(dict, key) {
  return map_option((function (prim) {
                return prim | 0;
              }), flatMap_option(Js_json.decodeNumber, Js_primitive.undefined_to_opt(dict[key])));
}

var respondWithNotFound = Express.Response[/* sendStatus */7](/* NotFound */23);

var sendNotFound = Express.Middleware[/* from */5]((function (_, _$1) {
        return respondWithNotFound;
      }));

function onGet(path, listMiddleware) {
  return Express.App[/* getWithMany */5](app, path, listMiddleware);
}

function onPost(path, listMiddleware) {
  return Express.App[/* postWithMany */8](app, path, listMiddleware);
}

function safe_int_of_string(str) {
  var exit = 0;
  var x;
  try {
    x = Caml_format.caml_int_of_string(str);
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Caml_builtin_exceptions.failure) {
      return undefined;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    return x;
  }
  
}

function fold_either(hl, hr, elr) {
  if (elr.tag) {
    return Curry._1(hr, elr[0]);
  } else {
    return Curry._1(hl, elr[0]);
  }
}

function eitherFromOption(errMsg, opt) {
  if (opt !== undefined) {
    return /* Right */Block.__(1, [Js_primitive.valFromOption(opt)]);
  } else {
    return /* Left */Block.__(0, [errMsg]);
  }
}

var logging = Express.Middleware[/* from */5]((function (next, req) {
        var time = new Date(Date.now()).toLocaleDateString();
        console.log($$String.concat(" :: ", /* :: */[
                  time,
                  /* :: */[
                    Express.Request[/* methodRaw */13](req),
                    /* :: */[
                      Express.Request[/* path */16](req),
                      /* [] */0
                    ]
                  ]
                ]));
        return Curry._1(next, Express.Next[/* middleware */0]);
      }));

function setPropertyNum(req, key, num, res) {
  var reqData = Express.Request[/* asJsonObject */1](req);
  reqData[key] = num;
  return res;
}

function getOr(def, opt) {
  if (opt !== undefined) {
    return Js_primitive.valFromOption(opt);
  } else {
    return def;
  }
}

function extractIdFromReqParams(req) {
  return eitherFromOption("Wrong ID in request params", flatMap_option(safe_int_of_string, getDictString(Express.Request[/* params */0](req), "id")));
}

var axiosInstance = Axios.create({
      baseURL: "http://localhost:3000/"
    });

function makePostRequet(url) {
  return axiosInstance.post(url);
}

function buildPath(conts) {
  return $$String.concat("/", conts);
}

function requestUser(id) {
  return axiosInstance.post($$String.concat("/", /* :: */[
                    "user",
                    /* :: */[
                      id,
                      /* [] */0
                    ]
                  ])).then((function (resp) {
                return Promise.resolve(RemoteUser$WebServer.decode(resp.data));
              }));
}

onGet("/read-user/:id", /* array */[
      logging,
      Express.Middleware[/* from */5]((function (next, req, res) {
              return fold_either((function () {
                            return Curry._2(next, Express.Next[/* route */1], res);
                          }), (function (id) {
                            return Curry._2(next, Express.Next[/* middleware */0], setPropertyNum(req, "theValue", id, res));
                          }), extractIdFromReqParams(req));
            })),
      Express.PromiseMiddleware[/* from */0]((function (_, req, res) {
              var reqData = Express.Request[/* asJsonObject */1](req);
              return requestUser(String(getOr(0, getDictFloat(reqData, "theValue")))).then((function (user) {
                            return Promise.resolve(Express.Response[/* sendString */2](RemoteUser$WebServer.present(user), res));
                          }));
            }))
    ]);

function onListen(e) {
  var exit = 0;
  var val;
  try {
    val = e;
    exit = 1;
  }
  catch (raw_exn){
    var exn = Js_exn.internalToOCamlException(raw_exn);
    if (exn[0] === Js_exn.$$Error) {
      console.log(exn[1]);
      Process.exit(1);
      return /* () */0;
    } else {
      throw exn;
    }
  }
  if (exit === 1) {
    console.log("Listening at http://127.0.0.1:4000");
    return /* () */0;
  }
  
}

Express.App[/* listen */19](app, 4000, onListen, /* () */0);

exports.app = app;
exports.flatMap_option = flatMap_option;
exports.map_option = map_option;
exports.getDictString = getDictString;
exports.getDictFloat = getDictFloat;
exports.respondWithNotFound = respondWithNotFound;
exports.sendNotFound = sendNotFound;
exports.onGet = onGet;
exports.onPost = onPost;
exports.safe_int_of_string = safe_int_of_string;
exports.fold_either = fold_either;
exports.eitherFromOption = eitherFromOption;
exports.logging = logging;
exports.setPropertyNum = setPropertyNum;
exports.getOr = getOr;
exports.extractIdFromReqParams = extractIdFromReqParams;
exports.axiosInstance = axiosInstance;
exports.makePostRequet = makePostRequet;
exports.buildPath = buildPath;
exports.requestUser = requestUser;
exports.onListen = onListen;
/* app Not a pure module */
